# -*- coding: utf-8 -*-
"""tf-classification-full.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QQg_8bp4cLassqUQcL_veTwJjGl0rXT7
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv('cancer_classification.csv')

df.info()

df.describe().transpose()

sns.countplot(x='benign_0__mal_1', data=df)

plt.figure(figsize=(15,8))
df.corr()['benign_0__mal_1'].sort_values().plot(kind='bar')
# aim == dropping perfectly correlating values

plt.figure(figsize=(15,8))
df.corr()['benign_0__mal_1'][:-1].sort_values().plot(kind='bar')
# dropping the label column; it has 1 correlation with itself

plt.figure(figsize=(10,10))
sns.heatmap(df.corr())

X = df.drop('benign_0__mal_1',axis=1).values
y = df['benign_0__mal_1'].values

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=.25,random_state=101)

from sklearn.preprocessing import MinMaxScaler
# scaling the data with minmaxscale prepocessor

scaler = MinMaxScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout

X_train.shape

model = Sequential()
model.add(Dense(30,activation='relu'))
model.add(Dense(15,activation='relu'))
model.add(Dense(1,activation='sigmoid')) # binary classification problem
model.compile(loss='binary_crossentropy',optimizer='adam')

model.fit(x=X_train,y=y_train,epochs=600,validation_data=(X_test,y_test))

losses = pd.DataFrame(model.history.history)

losses.plot() # overfitting

"""**Redefining the model to eliminate overfitting**"""

from tensorflow.keras.callbacks import EarlyStopping
# have to choose a metric for monitoring, have to set patience variable <= EarlyStopping(help)

early_stop = EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=25)
# minimize the val_loss, waiting 25 epoch after identifying a stop

model = Sequential()
model.add(Dense(30,activation='relu'))
model.add(Dense(15,activation='relu'))
model.add(Dense(1,activation='sigmoid')) # binary classification problem
model.compile(loss='binary_crossentropy',optimizer='adam')

model.fit(x=X_train,y=y_train,epochs=600,validation_data=(X_test,y_test),callbacks=[early_stop])

model_loss = pd.DataFrame(model.history.history)
model_loss.plot()

"""**Dropout AND early stopping**"""

# adding dropout layers == turn off a % of neurons automatically and randomly
from tensorflow.keras.layers import Dropout

model = Sequential()
model.add(Dense(30,activation='relu'))
model.add(Dropout(.5)) # probability of which neurons are randomly turned off
model.add(Dense(15,activation='relu'))
model.add(Dropout(.5))
model.add(Dense(1,activation='sigmoid')) # binary classification problem
model.compile(loss='binary_crossentropy',optimizer='adam')

model.fit(x=X_train,y=y_train,epochs=600,validation_data=(X_test,y_test),callbacks=[early_stop])

model_loss = pd.DataFrame(model.history.history)
model_loss.plot()

"""**Full evaluation**"""

predictions = (model.predict(X_test) > 0.5).astype("int32")

from sklearn.metrics import classification_report,confusion_matrix

print(classification_report(y_test,predictions))

print(confusion_matrix(y_test,predictions))